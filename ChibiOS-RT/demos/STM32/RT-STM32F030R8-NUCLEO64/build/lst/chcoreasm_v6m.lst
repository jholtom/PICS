ARM GAS  /tmp/ccuBgIX6.s 			page 1


   1              	# 1 "../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S"
   1              	/*
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    compilers/GCC/chcoreasm_v6m.s
  22              	 * @brief   ARMv6-M architecture port low level code.
  23              	 *
  24              	 * @addtogroup ARMCMx_GCC_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#if !defined(FALSE) || defined(__DOXYGEN__)
  29              	#define FALSE   0
  30              	#endif
  31              	
  32              	#if !defined(TRUE) || defined(__DOXYGEN__)
  33              	#define TRUE    1
  34              	#endif
  35              	
  36              	#define _FROM_ASM_
  37              	#include "chlicense.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
ARM GAS  /tmp/ccuBgIX6.s 			page 2


  18              	*/
  19              	
  20              	/**
  21              	 * @file    chlicense.h
  22              	 * @brief   License Module macros and structures.
  23              	 *
  24              	 * @addtogroup license
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef CHLICENSE_H
  29              	#define CHLICENSE_H
  30              	
  31              	/*===========================================================================*/
  32              	/* Module constants.                                                         */
  33              	/*===========================================================================*/
  34              	
  35              	/**
  36              	 * @name   Allowed Features Levels
  37              	 * @{
  38              	 */
  39              	#define CH_FEATURES_BASIC                   0
  40              	#define CH_FEATURES_INTERMEDIATE            1
  41              	#define CH_FEATURES_FULL                    2
  42              	/** @} */
  43              	
  44              	/**
  45              	 * @name    Deployment Options
  46              	 */
  47              	#define CH_DEPLOY_UNLIMITED                -1
  48              	#define CH_DEPLOY_NONE                      0
  49              	/** @} */
  50              	
  51              	/**
  52              	 * @name    Licensing Options
  53              	 * @{
  54              	 */
  55              	#define CH_LICENSE_GPL                      0
  56              	#define CH_LICENSE_GPL_EXCEPTION            1
  57              	#define CH_LICENSE_COMMERCIAL_FREE          2
  58              	#define CH_LICENSE_COMMERCIAL_DEVELOPER     3
  59              	#define CH_LICENSE_COMMERCIAL_FULL          4
  60              	#define CH_LICENSE_PARTNER                  5
  61              	/** @} */
  62              	
  63              	#include "chcustomer.h"
   1              	/*
  64              	#if CH_LICENSE == CH_LICENSE_PARTNER
  38              	#include "chconf.h"
   1              	/*
  39              	#include "chcore.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
ARM GAS  /tmp/ccuBgIX6.s 			page 3


   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    ARMCMx/chcore.h
  22              	 * @brief   ARM Cortex-Mx port macros and structures.
  23              	 *
  24              	 * @addtogroup ARMCMx_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef CHCORE_H
  29              	#define CHCORE_H
  30              	
  31              	/*===========================================================================*/
  32              	/* Module constants.                                                         */
  33              	/*===========================================================================*/
  34              	
  35              	/**
  36              	 * @name    Architecture and Compiler
  37              	 * @{
  38              	 */
  39              	/**
  40              	 * @brief   Macro defining a generic ARM architecture.
  41              	 */
  42              	#define PORT_ARCHITECTURE_ARM
  43              	
  44              	/* The following code is not processed when the file is included from an
  45              	   asm module because those intrinsic macros are not necessarily defined
  46              	   by the assembler too.*/
  47              	#if !defined(_FROM_ASM_)
  48              	
  49              	/**
  50              	 * @brief   Compiler name and version.
  51              	 */
  52              	#if defined(__GNUC__) || defined(__DOXYGEN__)
  53              	#define PORT_COMPILER_NAME              "GCC " __VERSION__
  54              	
  55              	#elif defined(__ICCARM__)
  56              	#define PORT_COMPILER_NAME              "IAR"
  57              	
  58              	#elif defined(__CC_ARM)
  59              	#define PORT_COMPILER_NAME              "RVCT"
  60              	
  61              	#else
  62              	#error "unsupported compiler"
  63              	#endif
ARM GAS  /tmp/ccuBgIX6.s 			page 4


  64              	
  65              	#endif /* !defined(_FROM_ASM_) */
  66              	
  67              	/** @} */
  68              	
  69              	/* Inclusion of the Cortex-Mx implementation specific parameters.*/
  70              	#include "cmparams.h"
   1              	/*
  71              	
  72              	/*===========================================================================*/
  73              	/* Module pre-compile time settings.                                         */
  74              	/*===========================================================================*/
  75              	
  76              	/**
  77              	 * @brief   Enables an alternative timer implementation.
  78              	 * @details Usually the port uses a timer interface defined in the file
  79              	 *          @p chcore_timer.h, if this option is enabled then the file
  80              	 *          @p chcore_timer_alt.h is included instead.
  81              	 */
  82              	#if !defined(PORT_USE_ALT_TIMER)
  83              	#define PORT_USE_ALT_TIMER              FALSE
  84              	#endif
  85              	
  86              	/*===========================================================================*/
  87              	/* Derived constants and error checks.                                       */
  88              	/*===========================================================================*/
  89              	
  90              	/*===========================================================================*/
  91              	/* Module data structures and types.                                         */
  92              	/*===========================================================================*/
  93              	
  94              	/* The following code is not processed when the file is included from an
  95              	   asm module.*/
  96              	#if !defined(_FROM_ASM_)
  97              	
  98              	/**
  99              	 * @brief   Type of a generic ARM register.
 100              	 */
 101              	typedef void *regarm_t;
 102              	
 103              	/**
 104              	 * @brief   Type of stack and memory alignment enforcement.
 105              	 * @note    In this architecture the stack alignment is enforced to 64 bits,
 106              	 *          32 bits alignment is supported by hardware but deprecated by ARM,
 107              	 *          the implementation choice is to not offer the option.
 108              	 */
 109              	typedef uint64_t stkalign_t;
 110              	
 111              	/* The following declarations are there just for Doxygen documentation, the
 112              	   real declarations are inside the sub-headers being specific for the
 113              	   sub-architectures.*/
 114              	#if defined(__DOXYGEN__)
 115              	/**
 116              	 * @brief   Interrupt saved context.
 117              	 * @details This structure represents the stack frame saved during a
 118              	 *          preemption-capable interrupt handler.
 119              	 * @note    It is implemented to match the Cortex-Mx exception context.
ARM GAS  /tmp/ccuBgIX6.s 			page 5


 120              	 */
 121              	struct port_extctx {};
 122              	
 123              	/**
 124              	 * @brief   System saved context.
 125              	 * @details This structure represents the inner stack frame during a context
 126              	 *          switch.
 127              	 */
 128              	struct port_intctx {};
 129              	#endif /* defined(__DOXYGEN__) */
 130              	
 131              	/**
 132              	 * @brief   Platform dependent part of the @p thread_t structure.
 133              	 * @details In this port the structure just holds a pointer to the
 134              	 *          @p port_intctx structure representing the stack pointer
 135              	 *          at context switch time.
 136              	 */
 137              	struct port_context {
 138              	  struct port_intctx *sp;
 139              	};
 140              	
 141              	#endif /* !defined(_FROM_ASM_) */
 142              	
 143              	/*===========================================================================*/
 144              	/* Module macros.                                                            */
 145              	/*===========================================================================*/
 146              	
 147              	/**
 148              	 * @brief   Total priority levels.
 149              	 */
 150              	#define CORTEX_PRIORITY_LEVELS          (1U << CORTEX_PRIORITY_BITS)
 151              	
 152              	/**
 153              	 * @brief   Minimum priority level.
 154              	 * @details This minimum priority level is calculated from the number of
 155              	 *          priority bits supported by the specific Cortex-Mx implementation.
 156              	 */
 157              	#define CORTEX_MINIMUM_PRIORITY         (CORTEX_PRIORITY_LEVELS - 1)
 158              	
 159              	/**
 160              	 * @brief   Maximum priority level.
 161              	 * @details The maximum allowed priority level is always zero.
 162              	 */
 163              	#define CORTEX_MAXIMUM_PRIORITY         0U
 164              	
 165              	/**
 166              	 * @brief   Priority level to priority mask conversion macro.
 167              	 */
 168              	#define CORTEX_PRIO_MASK(n)                                                 \
 169              	  ((n) << (8U - (unsigned)CORTEX_PRIORITY_BITS))
 170              	
 171              	/**
 172              	 * @brief   Priority level verification macro.
 173              	 */
 174              	#define PORT_IRQ_IS_VALID_PRIORITY(n)                                       \
 175              	  (((n) >= 0U) && ((n) < CORTEX_PRIORITY_LEVELS))
 176              	
ARM GAS  /tmp/ccuBgIX6.s 			page 6


 177              	/**
 178              	 * @brief   Priority level verification macro.
 179              	 */
 180              	#define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n)                                \
 181              	  (((n) >= CORTEX_MAX_KERNEL_PRIORITY) && ((n) < CORTEX_PRIORITY_LEVELS))
 182              	
 183              	/*===========================================================================*/
 184              	/* External declarations.                                                    */
 185              	/*===========================================================================*/
 186              	
 187              	/*===========================================================================*/
 188              	/* Module inline functions.                                                  */
 189              	/*===========================================================================*/
 190              	
 191              	/* Includes the sub-architecture-specific part.*/
 192              	#if (CORTEX_MODEL == 0) || (CORTEX_MODEL == 1)
 193              	#include "chcore_v6m.h"
   1              	/*
 194              	#elif (CORTEX_MODEL == 3) || (CORTEX_MODEL == 4) || (CORTEX_MODEL == 7)
  40              	
  41              	#if !defined(__DOXYGEN__)
  42              	
  43              	/*
  44              	 * RTOS-specific context offset.
  45              	 */
  46              	#if defined(_CHIBIOS_RT_CONF_)
  47              	#define CONTEXT_OFFSET  12
  48              	#elif defined(_CHIBIOS_NIL_CONF_)
  49              	#define CONTEXT_OFFSET  0
  50              	#else
  51              	#error "invalid chconf.h"
  52              	#endif
  53              	
  54              	                .set    SCB_ICSR, 0xE000ED04
  55              	                .set    ICSR_PENDSVSET, 0x10000000
  56              	                .set    ICSR_NMIPENDSET, 0x80000000
  57              	
  58              	                .cpu    cortex-m0
  59              	                .fpu    softvfp
  60              	
  61              	                .thumb
  62              	                .text
  63              	
  64              	/*--------------------------------------------------------------------------*
  65              	 * Performs a context switch between two threads.
  66              	 *--------------------------------------------------------------------------*/
  67              	                .thumb_func
  68              	                .globl  _port_switch
  69              	_port_switch:
  70 0000 F0B5     	                push    {r4, r5, r6, r7, lr}
  71 0002 4446     	                mov     r4, r8
  72 0004 4D46     	                mov     r5, r9
  73 0006 5646     	                mov     r6, r10
  74 0008 5F46     	                mov     r7, r11
  75 000a F0B4     	                push    {r4, r5, r6, r7}
  76              	                
  77 000c 6B46     	                mov     r3, sp
ARM GAS  /tmp/ccuBgIX6.s 			page 7


  78 000e CB60     	                str     r3, [r1, #CONTEXT_OFFSET]
  79 0010 C368     	                ldr     r3, [r0, #CONTEXT_OFFSET]
  80 0012 9D46     	                mov     sp, r3
  81              	                
  82 0014 F0BC     	                pop     {r4, r5, r6, r7}
  83 0016 A046     	                mov     r8, r4
  84 0018 A946     	                mov     r9, r5
  85 001a B246     	                mov     r10, r6
  86 001c BB46     	                mov     r11, r7
  87 001e F0BD     	                pop     {r4, r5, r6, r7, pc}
  88              	
  89              	/*--------------------------------------------------------------------------*
  90              	 * Start a thread by invoking its work function.
  91              	 *
  92              	 * Threads execution starts here, the code leaves the system critical zone
  93              	 * and then jumps into the thread function passed in register R4. The
  94              	 * register R5 contains the thread parameter. The function chThdExit() is
  95              	 * called on thread function return.
  96              	 *--------------------------------------------------------------------------*/
  97              	                .thumb_func
  98              	                .globl  _port_thread_start
  99              	_port_thread_start:
 100              	#if CH_DBG_SYSTEM_STATE_CHECK
 101              	                bl      _dbg_check_unlock
 102              	#endif
 103              	#if CH_DBG_STATISTICS
 104              	                bl      _stats_stop_measure_crit_thd
 105              	#endif
 106 0020 62B6     	                cpsie   i
 107 0022 281C     	                mov     r0, r5
 108 0024 A047     	                blx     r4
 109              	#if defined(_CHIBIOS_RT_CONF_)
 110 0026 0020     	                movs    r0, #0              /* MSG_OK */
 111 0028 FFF7FEFF 	                bl      chThdExit
 112              	#endif
 113              	#if defined(_CHIBIOS_NIL_CONF_)
 114              	                mov     r3, #0
 115              	                bl      chSysHalt
 116              	#endif
 117              	
 118              	/*--------------------------------------------------------------------------*
 119              	 * Post-IRQ switch code.
 120              	 *
 121              	 * Exception handlers return here for context switching.
 122              	 *--------------------------------------------------------------------------*/
 123              	                .thumb_func
 124              	                .globl  _port_switch_from_isr
 125              	_port_switch_from_isr:
 126              	#if CH_DBG_STATISTICS
 127              	                bl      _stats_start_measure_crit_thd
 128              	#endif
 129              	#if CH_DBG_SYSTEM_STATE_CHECK
 130              	                bl      _dbg_check_lock
 131              	#endif
 132 002c FFF7FEFF 	                bl      chSchDoReschedule
 133              	#if CH_DBG_SYSTEM_STATE_CHECK
 134              	                bl      _dbg_check_unlock
ARM GAS  /tmp/ccuBgIX6.s 			page 8


 135              	#endif
 136              	#if CH_DBG_STATISTICS
 137              	                bl      _stats_stop_measure_crit_thd
 138              	#endif
 139              	                .globl  _port_exit_from_isr
 140              	_port_exit_from_isr:
 141 0030 014A     	                ldr     r2, .L2
 142 0032 024B     	                ldr     r3, .L3
 143 0034 1360     	                str     r3, [r2, #0]
 144              	#if CORTEX_ALTERNATE_SWITCH
 145              	                cpsie   i
 146              	#endif
 147 0036 FEE7     	.L1:            b       .L1
 148              	
 149              	                .align  2
 150 0038 04ED00E0 	.L2:            .word   SCB_ICSR
 151              	#if CORTEX_ALTERNATE_SWITCH
 152              	.L3:            .word   ICSR_PENDSVSET
 153              	#else
 154 003c 00000080 	.L3:            .word   ICSR_NMIPENDSET
ARM GAS  /tmp/ccuBgIX6.s 			page 9


DEFINED SYMBOLS
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:54     *ABS*:00000000e000ed04 SCB_ICSR
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:55     *ABS*:0000000010000000 ICSR_PENDSVSET
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:56     *ABS*:0000000080000000 ICSR_NMIPENDSET
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:69     .text:0000000000000000 _port_switch
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:70     .text:0000000000000000 $t
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:99     .text:0000000000000020 _port_thread_start
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:125    .text:000000000000002c _port_switch_from_isr
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:140    .text:0000000000000030 _port_exit_from_isr
../../../os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:150    .text:0000000000000038 $d

UNDEFINED SYMBOLS
chThdExit
chSchDoReschedule
